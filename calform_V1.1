/**
 * Sets focus to the input field 'x' within the 'calcform'.
 * This is useful for user experience, as it places the cursor in the input field automatically.
 */
const setFocus = () => {
  document.calcform.x.focus();
};

/**
 * Main calculation function. It retrieves a value, converts it, rounds the result, and displays it.
 * This function serves as a primary example of the conversion and display logic.
 */
const calculate = () => {
  // Get the value from the 'x' input field.
  const x = document.calcform.x.value;

  // Convert the value using the external 'convert' function.
  let y = convert(x);

  // Round the result for cleaner display.
  y = roundResult(y);

  // Display the final result in the 'y' input field.
  document.calcform.y.value = y;
};

/**
 * A test calculation function. Similar to calculate(), but uses a different rounding function.
 * This is useful for testing alternative rounding methods without changing the main function.
 */
const calculateTest = () => {
  // Get the value from the 'x' input field.
  const x = document.calcform.x.value;

  // Convert the value.
  let y = convert(x);

  // Use an alternative rounding function, `roundResult1`.
  y = roundResult1(y);

  // Display the result.
  document.calcform.y.value = y;
};

/**
 * Calculation function for two input variables.
 * It retrieves values from 'x1' and 'x2', performs a conversion, and displays the result.
 */
const calculateWithTwoInputs = () => {
  // Get values from the input fields 'x1' and 'x2'.
  const x1 = document.calcform.x1.value;
  const x2 = document.calcform.x2.value;

  // Perform the conversion with two arguments.
  let y = convert(x1, x2);

  // Round the result.
  y = roundResult(y);

  // Display the result.
  document.calcform.y.value = y;
};

/**
 * Calculation function for three input variables.
 * Retrieves values from 'x1', 'x2', and 'x3', converts them, and displays the result.
 */
const calculateWithThreeInputs = () => {
  // Get values from input fields 'x1', 'x2', and 'x3'.
  const x1 = document.calcform.x1.value;
  const x2 = document.calcform.x2.value;
  const x3 = document.calcform.x3.value;

  // Perform the conversion with three arguments.
  let y = convert(x1, x2, x3);

  // Round the result before display.
  y = roundResult(y);

  // Display the result.
  document.calcform.y.value = y;
};

/**
 * Calculation function that performs two separate conversions and displays them in different fields.
 * It takes a single input 'x' and produces results for 'y1' and 'y2'.
 */
const calculateMultipleOutputs = () => {
  // Get the value from input field 'x'.
  const x = document.calcform.x.value;

  // Perform the first conversion and display in 'y1'.
  let y1 = convert1(x);
  y1 = roundResult(y1);
  document.calcform.y1.value = y1;

  // Perform the second conversion and display in 'y2'.
  let y2 = convert2(x);
  y2 = roundResult(y2);
  document.calcform.y2.value = y2;
};

/**
 * Handles base conversions.
 * @param {number} baseFrom - The initial base of the number.
 * @param {number} baseTo - The target base for conversion.
 */
const calculateBase = (baseFrom, baseTo) => {
  // Get the value to be converted.
  const x = document.calcform.x.value;

  // Perform the base conversion and display the result.
  document.calcform.y.value = convertBase(x, baseFrom, baseTo);
};

/**
 * Alternative base conversion function that uses a different conversion logic.
 * It's a simplified version of `calculateBase`.
 */
const calculateBase2 = () => {
  // Get the value.
  const x = document.calcform.x.value;

  // Convert the value and display the result.
  const y = convert(x);
  document.calcform.y.value = y;
};

/**
 * Rounds a number to a specified precision and returns the formatted string.
 * This is a helper function to ensure consistent rounding across all calculations.
 * @param {number} value - The number to round.
 * @returns {string} The rounded and formatted string representation of the number.
 */
const roundResult = (value) => {
  // Parse the input to ensure it's a floating-point number.
  const parsedValue = parseFloat(value);

  // Use the helper `roundNum` to perform the rounding with a precision of 10.
  return roundNum(parsedValue, 10);
};

/**
 * Rounds a number to a specific precision and handles trailing zeros.
 * @param {number} num - The number to round.
 * @param {number} precision - The number of significant digits.
 * @returns {string} The rounded number as a string, with trailing zeros removed.
 */
const roundNum = (num, precision) => {
  // Use toPrecision() to round to the specified number of significant digits.
  let roundedStr = num.toPrecision(precision + 1);

  // Convert the string to a number and back to string to remove scientific notation if not needed.
  // This is a common way to handle potential scientific notation output from `toPrecision`.
  const resultNum = parseFloat(roundedStr);

  // Return the result as a string, which handles trailing zeros automatically.
  return String(resultNum);
};
